import React , {Component} from 'react';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
//import { TimePickerComponent } from '@syncfusion/ej2-react-calendars';
import TimePicker from 'react-time-picker';

class Input extends Component{
    state={
        task:'',
        taskList:[],
        startTime:"10:00",
        endTime:"10:00",
        diff:0
      };
      onChange = event => 
      {
          this.setState({ starttime:event.target.value })
      }
    //   onChange = starttime => 
    //   {
    //       this.setState({ starttime })
    //   }
      onChangeEnd = event => 
      {
          this.setState({ endtime:event.target.value })
      }
    //   onChangeEnd = endtime => 
    //   {
    //       this.setState({ endtime})
    //   }
      inputChangeHandler = (input)=>{
          this.setState({
            task: input
          });
      }
      btnAddHandler = (inputTask,inputTime,endtime)=>{
       
        let item = {
          value: inputTask,
          starttime: inputTime,
          endtime:endtime,
          diff:endtime-inputTime
        }
        let newList = [
            ...this.state.taskList,
            item
          ]
        
          this.setState({
            taskList:newList,
            task: '',

          })
      let day=new Date();
      let i=0;
      let lenOfTasks;
      let isPresent=0;
      this.user=JSON.parse(localStorage.getItem(this.props.username));
      lenOfTasks=this.user.today.length;
      if(lenOfTasks===7)
      {
        this.user.today.shift()
      }
      console.log(this.user.today)
      console.log(lenOfTasks)
      //i=lenOfTasks
       while(i<lenOfTasks){
      //   if(day!=this.user.today[i].date)
         i++;
      //   else
      //   {
      //     isPresent=1;
      //     break;
      //   }
       }
      
       this.user.today[i-1].date=23;
       this.user.today[i-1].startTime.push(this.state.starttime)
       this.user.today[i-1].endTime.push(this.state.endtime)
       this.user.today[i-1].tasks.push(this.state.task)
     localStorage.setItem(this.props.username,JSON.stringify(this.user))
      

      }
      


    render()
    {
      this.data=JSON.parse(localStorage.getItem(this.props.username));
        return (
            <div className="container">
            <form onSubmit={this.handleFormSubmit}>
                Activity<input className="inputField" type="text" placeholder="Enter the Activity" onChange={this.handleChangeActivity} value={this.state.activity}></input><br/><br/>
                Start Date :<DatePicker selected={this.state.startDate} value={this.state.startDate} onChange={this.handleChange} /><br/><br/>
                Start Time:<TimePicker id="timepicker" placeholder="Select a Time" width="195" value={this.state.startTime} onChange={this.handleTime} /><br/><br/>
                End Time:<TimePicker id="timepicker" placeholder="Select a Time" width="195" value={this.state.endTime} onChange={this.handleTimeEnd} /><br/><br/>
     
                <button className="submit" type="submit"  id="submit">Submit</button><br/><br/>
            </form>

            </div>
        )
    }
    
    
}

export default Tracker;



import React , {Component} from 'react';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import { TimePickerComponent } from '@syncfusion/ej2-react-calendars';
import TimePicker from 'react-time-picker';



class Tracker extends Component{
  constructor(props)
  {

    super(props)
    this.state={
        activity:'',
        time:"",
        endTime:"",
        startTime:"",
        startDate:"",
        reder:0
      };
      this.submitHandler=this.submitHandler.bind(this);
      
    }
    

     

      handleChangeActivity = event => 
      {
          this.setState({ activity:event.target.value })
      } 

      handleChange= startDate => 
      {
          this.setState({startDate:startDate})
      } 
      
      handleTimeEnd = event => this.setState({ startTime:event.target.value})

      handleTime = event => this.setState({ endTime:event.target.value})
   
      
      submitHandler(){
       
        console.log("submitentered")
        let day=new Date();
        let i=0;
        let lenOfactivity;
     
       this.user=JSON.parse(localStorage.getItem(this.props.username))
        

      lenOfactivity=this.user.List.length;

      if(lenOfactivity===7)
      {
        this.state.user.List.shift()
      }
     
     
       while(i<lenOfactivity){
     
         i++;
      
       }
      
      
       //this.state.user.List[i-1].activity.push(this.state.activity)
       this.user.List[i-1].startTime.push(this.state.endTime-this.state.startTime)
       this.user.List[i-1].endTime.push(this.state.endTime)
       this.user.List[i-1].activity.push(this.state.activity)
       this.user.List[i-1].date.push(this.state.startDate)

     localStorage.setItem(this.props.username,JSON.stringify(this.user))

    
     this.setState({reder:1})
      

      }

      
    render()
    {
      let user1=JSON.parse(localStorage.getItem(this.props.username))
      
      
        return(
            <div>
                
                Activity<input className="inputField" type="text" placeholder="Enter the Activity" onChange={(event)=>this.handleChangeActivity(event)} value={this.state.activity}></input><br/><br/>
                Start Date :<DatePicker selected={this.state.startDate} value={this.state.startDate} dateFormat="dd-MM-yyyy" onChange={this.handleChange} /><br/><br/>
                Start Time:<TimePickerComponent    onChange={this.handleTime} value={this.state.startTime} /><br/><br/>
                End Time:<TimePickerComponent  value={this.state.endTime} onChange={this.handleTimeEnd} /><br/><br/>
                <button id="btn1" type="submit" onClick={this.submitHandler} >Add</button>
                 
                 
                 <ul>
                {     user1.List.map((item,key)=>{
                
                return item.activity.map((item1,key)=>{
                return <li>Activity:{item1}&nbsp;&nbsp;Date:{item.date[key]}&nbsp;&nbsp;Duration:{item.startTime[key]}</li>
                })
                
                
                }
              )}
              </ul> 
            </div>
        )
    }
}
export default Tracker





import React from 'react';
import {
    Container, Col, Form,
    FormGroup, Label, Input,
    Button,
  } from 'reactstrap';

import Tracker from './Tracker';
import './signup.css';
class SignUp extends React.Component {
    constructor(props)
    {
       super(props)
        this.state={
            username:'',
            password:'',
            List:[{date:[''],activity:[],endTime:[],
            startTime:[]}],
            submit:false,
            click:false
            
        }
        this.handleFormSubmit = this.handleSubmit.bind(this);
    }
        
    handleChange=(e)=>
    {
       this.setState({username: e.target.value})
    }
    handlePassword =(e)=>
    {
      this.setState({password: e.target.value})
    }
    handleSubmit = (e)=> {

        this.setState({submit:true,
            click:!this.state.click,
            
                   })

        if(!localStorage.getItem(this.state.username))
        {
        
        localStorage.setItem(this.state.username,JSON.stringify(this.state));
    }
    }

    handleLogout = (e) => {
        this.props.history.goBack();
        this.setState({
            username: null,
            password: null,
            click: !this.state.click
        });
    }


render()
{
    

    return (
        <div className="mainContainer">
            <h1 className="Text">SIGN UP</h1>
            
            {/* UserName:<input type="text" className="inputField" onChange={this.handleChange}></input><br></br><br></br>
            Password:<input type="password"   className="inputField" onChange={this.handlePassword}></input>
            <button  className="Signupbutton" onClick={this.handleSubmit} >signup</button> */}
            {this.state.click ? 
            (<div>
                <button onClick={this.handleLogout}>Logout</button>
            <Tracker username={this.state.username} password={this.state.password}/>
            </div>)
            :
            (
            <div>
                <Form className="form">
            <Col>
            <FormGroup>
                UserName:<input type="text" className="inputField" onChange={this.handleChange}></input><br></br><br></br>
               
                </FormGroup>
                </Col>
                <Col>
            <FormGroup>Password:<input type="password"   className="inputField" onChange={this.handlePassword}></input>
            </FormGroup>
            </Col>
            </Form>
            <button  className="Signupbutton" onClick={this.handleSubmit} >signup</button>

                </div>)
            }
   
           
            
        </div>
    );
}
}

export default SignUp;


---------------------------------------------------------------------------------------------------


import React , {Component} from 'react';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import SideDrawer from './sidedrawer';
import Backdrop from './backdrop';
import Toolbar from './toolbar';
import { TimePickerComponent } from '@syncfusion/ej2-react-calendars';
import moment from 'moment';




class Tracker extends Component{
  constructor(props)
  {

    super(props)
    this.state={
        activity:'',
        time:"",
        endTime:"11:00",
        startTime:"12:00",
        startDate:new Date(),
        reder:0,
        // sidedraweropen:false
      };
      this.submitHandler=this.submitHandler.bind(this);
      
    }

    drawerHandler = () => {
      this.setState((prevState)=>{
        return{sidedraweropen:!prevState.sidedraweropen}
      });
    }
  
    backdropHandler = () => {
      this.setState({sidedraweropen:false});
    }
    

     

      handleChangeActivity = event => 
      {
          this.setState({ activity:event.target.value })
      } 

      handleChange= startDate => 
      {
          this.setState({startDate:startDate})
      } 
      
      handleTimeEnd = event => this.setState({ startTime:event.target.value})

      handleTime = event => this.setState({ endTime:event.target.value})
   
      
      submitHandler(){
       
        console.log("submitentered")
        
        let i=0;
        let isbreak=0;
        let lenOfactivity;
     
       this.user=JSON.parse(localStorage.getItem(this.props.username))
        
        
      lenOfactivity=this.user.List.length;
      while(i<lenOfactivity){
        if(moment(this.state.startDate).format('L')!==moment(this.user.List[i].date[0]).format('L'))
       { i++;}
       else{
         isbreak=1;
         break; 
       }
     
      }

      if(lenOfactivity===7)
      {
        this.user.List.shift()
      }
     
     
      
      
      if(isbreak===0)
       
        {

          this.user.List.push({date:[this.state.startDate],activity:[this.state.activity],startTime:[this.state.startTime],endTime:[this.state.endTime]});
      
      } 

      else
      {
        
        this.user.List[lenOfactivity===7?i-1: i].startTime.push(this.state.startTime)
        this.user.List[lenOfactivity===7?i-1: i].endTime.push(this.state.endTime)
        this.user.List[lenOfactivity===7?i-1: i].activity.push(this.state.activity)
         this.user.List[lenOfactivity===7?i-1: i].date.push(this.state.startDate)
      }
     localStorage.setItem(this.props.username,JSON.stringify(this.user))

    
     this.setState({reder:1})
      

      }

      
    render()
    {

     
      let user1=JSON.parse(localStorage.getItem(this.props.username))
      
      
        return(


            <div>
                
               
                <div>
                Activity<input className="inputField" type="text" placeholder="Enter the Activity" onChange={(event)=>this.handleChangeActivity(event)} value={this.state.activity}></input><br/><br/>
                Start Date :<DatePicker selected={this.state.startDate}   onChange={this.handleChange} /><br/><br/>
                Start Time:<TimePickerComponent    onChange={this.handleTime} value={this.state.startTime} /><br/><br/>
                End Time:<TimePickerComponent  value={this.state.endTime} onChange={this.handleTimeEnd} /><br/><br/>
                <button id="btn1" type="submit" onClick={this.submitHandler} >Add</button>

                </div>
               
                 <ul>
                {     
                  user1.List.map((item,key)=>{
                    const date = item.date[0];

                return  ( 
                <div> {date && <span>{moment(date).format('L')}</span>}
                 {item.activity.map((item1,key)=>{
                return <li>Activity:{item1}&nbsp;&nbsp;&nbsp;&nbsp;Duration:{moment(item.startTime[key]).diff(moment(item.endTime[key]))}</li>
                })}</div>
                )
              
                }
              )}
              </ul> 
            </div>
        )
    }
}
export default Tracker;



{/* <td>{moment(item.startTime[key]).diff(moment(item.endTime[key]))}</td></tr> */}

---------------------------------------------------&&&&&&&&&&&&&&&&&&&&&&
import React , {Component} from 'react';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import SideDrawer from './sidedrawer';
import './Tracker.css';
import { MDBTable, MDBTableBody, MDBTableHead } from 'mdbreact';

import { TimePickerComponent } from '@syncfusion/ej2-react-calendars';
import moment from 'moment';




class Tracker extends Component{
 
    state={
        activity:'',
        endTime:"11:00",
        startTime:"12:00",
        startDate:new Date(),
        reder:0,
      };
     
      handleChangeActivity =(input)=> 
      {
          this.setState({ activity:input })
      } 

      handleChange= startDate => 
      {
          this.setState({startDate:startDate})
      } 
      
      handleTimeEnd = event => this.setState({ startTime:event.target.value})

      handleTime = event => this.setState({ endTime:event.target.value})
   
      
      submitHandler = (inputTask,inputTime,endtime)=>{
       
       
        console.log("submitentered")
        
        let i=0;
       
        let lenOfactivity;
     
       this.user=JSON.parse(localStorage.getItem(this.props.username))
        
        
      lenOfactivity=this.user.List.length;

      if(lenOfactivity===7)
      {
        this.user.List.shift()
      }
     
      while(i<lenOfactivity)
      {i++;}
     
        
        this.user.List[i-1].startTime.push((this.state.endTime-this.state.startTime)/60000)
        this.user.List[i-1].endTime.push(this.state.endTime)
        this.user.List[i-1].activity.push(this.state.activity)
         this.user.List[i-1].date.push(moment(this.state.startDate).format('L'));
     
     localStorage.setItem(this.props.username,JSON.stringify(this.user))

    
     this.setState({reder:1})
      

      }

      
    render()
    {

     
      let user1=JSON.parse(localStorage.getItem(this.props.username))
      
      
        return(


            <div>
                
               
                <div>
                Activity<input className="Act" type="text" placeholder="Enter the Activity" onChange={(event)=>this.handleChangeActivity(event.target.value)}></input><br/><br/>
                Start Date :<DatePicker dateFormat='dd-MM-yyyy' selected={this.state.startDate} value={this.state.startDate}  onChange={this.handleChange} /><br/><br/>
                Start Time:<TimePickerComponent    value={this.state.startTime} onChange={this.handleTimeEnd} /><br/><br/>
                End Time:<TimePickerComponent  value={this.state.endTime} onChange={this.handleTime} /><br/><br/>
                <button id="btn1" type="submit" onClick={() => this.submitHandler(this.state.activity,this.state.startTime,this.state.endTime)} >Add</button>

              </div>
                <table>
     <tr>
                   <th>Date</th>
                   <th>Task</th>
                   <th>Duration</th>
           </tr>
      {user1.List.map((item,key)=>{
           return item.activity.map((item1,key)=>{
           return <tr>
                <td>{item.date[key]}</td> 
                <td>{item1}</td>
                <td>{item.startTime[key]}</td></tr>
             
         
         })
          
           }
         )}
         </table> 
         </div>
        )}}
export default Tracker;

